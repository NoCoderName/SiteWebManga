[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "coolsite",
        "description": "coolsite",
        "isExtraImport": true,
        "detail": "coolsite",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "WebManga.models",
        "description": "WebManga.models",
        "isExtraImport": true,
        "detail": "WebManga.models",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseModelForm",
        "importPath": "django.forms.models",
        "description": "django.forms.models",
        "isExtraImport": true,
        "detail": "django.forms.models",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "coolsite.coolsite.asgi",
        "description": "coolsite.coolsite.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "coolsite.coolsite.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-&(ya!3s)ukd^*+z9=^3z2el(z-#z4v@zyveb2d03xjt2h)@t4o'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-&(ya!3s)ukd^*+z9=^3z2el(z-#z4v@zyveb2d03xjt2h)@t4o'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'WebManga.apps.WebmangaConfig',",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'WebManga.apps.WebmangaConfig',\n]\nMIDDLEWARE = [",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'coolsite.urls'",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "ROOT_URLCONF = 'coolsite.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "WSGI_APPLICATION = 'coolsite.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "LANGUAGE_CODE = 'ru'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\nAUTH_USER_MODEL = 'WebManga.User'",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\nAUTH_USER_MODEL = 'WebManga.User'",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\nAUTH_USER_MODEL = 'WebManga.User'",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\nAUTH_USER_MODEL = 'WebManga.User'",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nAUTH_USER_MODEL = 'WebManga.User'",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "coolsite.coolsite.settings",
        "description": "coolsite.coolsite.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'WebManga.User'",
        "detail": "coolsite.coolsite.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "coolsite.coolsite.urls",
        "description": "coolsite.coolsite.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('WebManga.urls'))\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "coolsite.coolsite.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "coolsite.coolsite.wsgi",
        "description": "coolsite.coolsite.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "coolsite.coolsite.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "coolsite.WebManga.migrations.0001_initial",
        "description": "coolsite.WebManga.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "coolsite.WebManga.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "get_categories",
        "kind": 2,
        "importPath": "coolsite.WebManga.templatetags.webmanga_tags",
        "description": "coolsite.WebManga.templatetags.webmanga_tags",
        "peekOfCode": "def get_categories():\n    categories = Category.objects.all()\n    cat_list = list()\n    for category in categories:\n        if category.manga_set.exists():\n            cat_list.append(category)\n    return cat_list\n@register.simple_tag(name='message')\ndef get_message():\n    message = Message.objects.all()",
        "detail": "coolsite.WebManga.templatetags.webmanga_tags",
        "documentation": {}
    },
    {
        "label": "get_message",
        "kind": 2,
        "importPath": "coolsite.WebManga.templatetags.webmanga_tags",
        "description": "coolsite.WebManga.templatetags.webmanga_tags",
        "peekOfCode": "def get_message():\n    message = Message.objects.all()\n    return message\n@register.inclusion_tag('WebManga/label_box.html')\ndef label_box():\n    pass\n# @register.simple_tag(name='UserProfile')\n# def get_check_value(request):\n#     checkbox = request.POST.get('add_post')\n#     if checkbox:",
        "detail": "coolsite.WebManga.templatetags.webmanga_tags",
        "documentation": {}
    },
    {
        "label": "label_box",
        "kind": 2,
        "importPath": "coolsite.WebManga.templatetags.webmanga_tags",
        "description": "coolsite.WebManga.templatetags.webmanga_tags",
        "peekOfCode": "def label_box():\n    pass\n# @register.simple_tag(name='UserProfile')\n# def get_check_value(request):\n#     checkbox = request.POST.get('add_post')\n#     if checkbox:\n#         manga_pk = request.POST.get('manga_pk')\n#         user_name = ProfileUser.objects.get(user__username=request.POST.get('user_name'))\n#         return user_name.read.add(manga_pk).save()\n# def add_recording(user_name):",
        "detail": "coolsite.WebManga.templatetags.webmanga_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "coolsite.WebManga.templatetags.webmanga_tags",
        "description": "coolsite.WebManga.templatetags.webmanga_tags",
        "peekOfCode": "register = template.Library()\n@register.simple_tag(name='cats')\ndef get_categories():\n    categories = Category.objects.all()\n    cat_list = list()\n    for category in categories:\n        if category.manga_set.exists():\n            cat_list.append(category)\n    return cat_list\n@register.simple_tag(name='message')",
        "detail": "coolsite.WebManga.templatetags.webmanga_tags",
        "documentation": {}
    },
    {
        "label": "MangaAdmin",
        "kind": 6,
        "importPath": "coolsite.WebManga.admin",
        "description": "coolsite.WebManga.admin",
        "peekOfCode": "class MangaAdmin(admin.ModelAdmin):\n    list_display = ('id', 'title', 'time_create', 'get_html_photo', 'is_published')\n    list_display_links = ('id', 'title')\n    search_fields = ('title', 'content')\n    list_editable = ('is_published',)\n    list_filter = ('is_published', 'time_create')\n    prepopulated_fields = {'slug': ('title',)}\n    fields = ('title', 'slug', 'cat', 'content', 'photo', 'get_html_photo', 'is_published', 'manga', 'time_create', 'time_update')\n    readonly_fields = ('time_create', 'time_update', 'get_html_photo')\n    save_on_top = True",
        "detail": "coolsite.WebManga.admin",
        "documentation": {}
    },
    {
        "label": "MangaImagesAdmin",
        "kind": 6,
        "importPath": "coolsite.WebManga.admin",
        "description": "coolsite.WebManga.admin",
        "peekOfCode": "class MangaImagesAdmin(admin.ModelAdmin):\n    list_display = ['id', 'get_html_image', 'description', 'time_create']\n    list_display_links = ['id', 'time_create']\n    search_fields = ['id', 'description']\n    list_filter = ['description',]\n    fields = ['image', 'description', 'time_create']\n    readonly_fields = ['time_create',]\n    def get_html_image(self, object):\n         if object.image:\n            return mark_safe(f\"<img src='{object.image.url}' width=50>\")",
        "detail": "coolsite.WebManga.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmnin",
        "kind": 6,
        "importPath": "coolsite.WebManga.admin",
        "description": "coolsite.WebManga.admin",
        "peekOfCode": "class CategoryAdmnin(admin.ModelAdmin):\n    list_display = ('id', 'name')\n    list_display_links = ('id', 'name')\n    search_fields = ('name',)\n    prepopulated_fields = {'slug': ('name',)}\nclass MessageAdmin(admin.ModelAdmin):\n    list_display = ('id', 'message', 'sender')\n    list_display_links = ('id', 'message',)\n    search_fields = ('message',)\n# class ProfileUserAdmin(admin.ModelAdmin):",
        "detail": "coolsite.WebManga.admin",
        "documentation": {}
    },
    {
        "label": "MessageAdmin",
        "kind": 6,
        "importPath": "coolsite.WebManga.admin",
        "description": "coolsite.WebManga.admin",
        "peekOfCode": "class MessageAdmin(admin.ModelAdmin):\n    list_display = ('id', 'message', 'sender')\n    list_display_links = ('id', 'message',)\n    search_fields = ('message',)\n# class ProfileUserAdmin(admin.ModelAdmin):\n#     list_display = ('id', 'user', 'get_html_image', 'slug')\n#     list_display_links = ('id', 'user',)\n#     search_fields = ('user',)\n#     def get_html_image(self, object):\n#         if object.photo:",
        "detail": "coolsite.WebManga.admin",
        "documentation": {}
    },
    {
        "label": "WebmangaConfig",
        "kind": 6,
        "importPath": "coolsite.WebManga.apps",
        "description": "coolsite.WebManga.apps",
        "peekOfCode": "class WebmangaConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'WebManga'\n    verbose_name = 'Манга'",
        "detail": "coolsite.WebManga.apps",
        "documentation": {}
    },
    {
        "label": "RegisterUserForm",
        "kind": 6,
        "importPath": "coolsite.WebManga.forms",
        "description": "coolsite.WebManga.forms",
        "peekOfCode": "class RegisterUserForm(UserCreationForm):\n    username = forms.CharField(label='Логин', widget=forms.TextInput(attrs={'class': 'form-input'}))\n    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-input'}))\n    password1 = forms.CharField(label='Пороль', widget=forms.PasswordInput(attrs={'class': 'form-input'}))\n    password2 = forms.CharField(label='Повтор пороля', widget=forms.PasswordInput(attrs={'class': 'form-input'}))\n    class Meta:\n        model = get_user_model()\n        fields = ('username', 'email', 'password1', 'password2')\n        fields = ('username', 'email', 'password1', 'password2')\nclass LoginUserForm(AuthenticationForm):",
        "detail": "coolsite.WebManga.forms",
        "documentation": {}
    },
    {
        "label": "LoginUserForm",
        "kind": 6,
        "importPath": "coolsite.WebManga.forms",
        "description": "coolsite.WebManga.forms",
        "peekOfCode": "class LoginUserForm(AuthenticationForm):\n    username = forms.CharField(label='Логин', widget=forms.TextInput(attrs={'class': 'form-input'}))\n    password = forms.CharField(label='Пороль', widget=forms.PasswordInput(attrs={'class': 'form-input'}))\nclass MessageForm(forms.ModelForm):\n    message = forms.CharField(label='Введите текст', widget=forms.TextInput(attrs={'class': 'message-input'}))\n    class Meta: \n        model = Message # get_user_model()\n        fields = ('message',)\n# class UserForm(forms.ModelForm):\n#     read = forms.BooleanField(label='Добавить', widget=forms.BooleanField())",
        "detail": "coolsite.WebManga.forms",
        "documentation": {}
    },
    {
        "label": "MessageForm",
        "kind": 6,
        "importPath": "coolsite.WebManga.forms",
        "description": "coolsite.WebManga.forms",
        "peekOfCode": "class MessageForm(forms.ModelForm):\n    message = forms.CharField(label='Введите текст', widget=forms.TextInput(attrs={'class': 'message-input'}))\n    class Meta: \n        model = Message # get_user_model()\n        fields = ('message',)\n# class UserForm(forms.ModelForm):\n#     read = forms.BooleanField(label='Добавить', widget=forms.BooleanField())\n#     class Meta:\n#         model = get_user_model()\n#         fields = ('read',)",
        "detail": "coolsite.WebManga.forms",
        "documentation": {}
    },
    {
        "label": "Manga",
        "kind": 6,
        "importPath": "coolsite.WebManga.models",
        "description": "coolsite.WebManga.models",
        "peekOfCode": "class Manga(models.Model):\n    title = models.CharField(max_length=255, verbose_name='3аголовок')\n    slug = models.SlugField(max_length=255, unique=True, db_index=True, verbose_name=\"URL\")\n    content = models.TextField(blank=True, verbose_name='Введение манги')\n    photo = models.ImageField(upload_to=\"photos/%Y/%m/%d/\", verbose_name=\"Фото\")\n    time_create = models.DateTimeField(auto_now_add=True, verbose_name='Время создания')\n    time_update = models.DateTimeField(auto_now=True, verbose_name='Время изменения')\n    is_published = models.BooleanField(default=True, verbose_name='Публикация')\n    cat = models.ForeignKey('Category', on_delete=models.PROTECT, verbose_name='Категории')\n    manga = models.ManyToManyField('MangaImage', verbose_name='Манга')",
        "detail": "coolsite.WebManga.models",
        "documentation": {}
    },
    {
        "label": "MangaImage",
        "kind": 6,
        "importPath": "coolsite.WebManga.models",
        "description": "coolsite.WebManga.models",
        "peekOfCode": "class MangaImage(models.Model):\n    image = models.ImageField(upload_to='photos/%Y/%m/%d/', verbose_name='Изображение манги')\n    description = models.TextField(blank=True, verbose_name='Описание')\n    time_create = models.DateTimeField(auto_now_add=True, verbose_name='Время добавления')\n    def __str__(self):\n        return self.description\n    class Meta:\n        verbose_name = 'Изображение манги'\n        verbose_name_plural = 'Изображение манги'\n        ordering = ['time_create']",
        "detail": "coolsite.WebManga.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "coolsite.WebManga.models",
        "description": "coolsite.WebManga.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=100, db_index=True, verbose_name=\"Категория\")\n    slug = models.SlugField(max_length=255, unique=True, db_index=True, verbose_name=\"URL\")\n    def __str__(self):\n        return self.name\n    def get_absolute_url(self):\n        return reverse('category', kwargs={'cat_slug': self.slug})\n    class Meta:\n        verbose_name = 'Категория'\n        verbose_name_plural = 'Категории'",
        "detail": "coolsite.WebManga.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "coolsite.WebManga.models",
        "description": "coolsite.WebManga.models",
        "peekOfCode": "class User(AbstractUser):\n    photo = models.ImageField(upload_to='photo_user/%Y/%m/%d/', blank=True, null=True, verbose_name='Фото пользователя')\n    read = models.ManyToManyField(Manga, blank=True, verbose_name='Читают')\n    # def __str__(self):\n    #     return self.user.username\nclass Message(models.Model):\n    message = models.TextField(verbose_name='Сообщение')\n    sending_time = models.DateTimeField(auto_now_add=True, verbose_name='Время отправки')\n    sender = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='Отправитель')\n    def __str__(self):",
        "detail": "coolsite.WebManga.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "coolsite.WebManga.models",
        "description": "coolsite.WebManga.models",
        "peekOfCode": "class Message(models.Model):\n    message = models.TextField(verbose_name='Сообщение')\n    sending_time = models.DateTimeField(auto_now_add=True, verbose_name='Время отправки')\n    sender = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='Отправитель')\n    def __str__(self):\n        return f'{self.sender.username} - {self.sending_time}'",
        "detail": "coolsite.WebManga.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "coolsite.WebManga.urls",
        "description": "coolsite.WebManga.urls",
        "peekOfCode": "urlpatterns = [\n    path('', MangaHome.as_view(), name='home'),\n    path('category/<slug:cat_slug>/', category, name='category'),\n    path('about/', About.as_view(), name='about'),\n    path('contact/', contact, name='contact'),\n    path('login/', LoginUser.as_view(), name='login'),\n    path('logout/', logout_user, name='logout'),\n    path('register/', RegisterUser.as_view(), name='register'),\n    path('post/<slug:post_slug>/', Showpost.as_view(), name='post'),\n    path('chat/', MessageUser.as_view(), name='chat'),",
        "detail": "coolsite.WebManga.urls",
        "documentation": {}
    },
    {
        "label": "DataMixin",
        "kind": 6,
        "importPath": "coolsite.WebManga.utils",
        "description": "coolsite.WebManga.utils",
        "peekOfCode": "class DataMixin:\n    def get_user_context(self, **kwargs):\n        context = kwargs\n        cats = Category.objects.all()\n        context['menu'] = menu\n        context['cats'] = cats\n        if 'cat_selected' not in context:\n            context['cat_selected'] = 0\n        return context",
        "detail": "coolsite.WebManga.utils",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "coolsite.WebManga.utils",
        "description": "coolsite.WebManga.utils",
        "peekOfCode": "menu = [\n    {'title': 'Главная страница', 'url_name': 'home'},\n    {'title': 'О сайте', 'url_name': 'about'},\n    {'title': 'Связь с разработчиком', 'url_name': 'contact'},\n    # {'title': 'Чат', 'url_name': 'chat'},\n]\nclass DataMixin:\n    def get_user_context(self, **kwargs):\n        context = kwargs\n        cats = Category.objects.all()",
        "detail": "coolsite.WebManga.utils",
        "documentation": {}
    },
    {
        "label": "MangaHome",
        "kind": 6,
        "importPath": "coolsite.WebManga.views",
        "description": "coolsite.WebManga.views",
        "peekOfCode": "class MangaHome(DataMixin, ListView):\n    model = Manga\n    template_name = 'WebManga/index.html'\n    context_object_name = 'posts'\n    def get_context_data(self, *, object_list=None, **kwargs):\n        context = super().get_context_data(**kwargs)\n        c_def = self.get_user_context(title='Главная страница')\n        return dict(list(context.items()) + list(c_def.items()))\n    def get_queryset(self):\n        return Manga.objects.filter(is_published=True)",
        "detail": "coolsite.WebManga.views",
        "documentation": {}
    },
    {
        "label": "About",
        "kind": 6,
        "importPath": "coolsite.WebManga.views",
        "description": "coolsite.WebManga.views",
        "peekOfCode": "class About(DataMixin, ListView):\n    model = Manga\n    template_name = 'WebManga/about.html'\n    context_object_name = 'posts'\n    def get_context_data(self, *, object_list=None, **kwargs):\n        context = super().get_context_data(**kwargs)\n        c_def = self.get_user_context(title='О сайте')\n        return dict(list(context.items()) + list(c_def.items()))\ndef contact(request):\n    return HttpResponse('Свя3ь с ра3работчиком')",
        "detail": "coolsite.WebManga.views",
        "documentation": {}
    },
    {
        "label": "Showpost",
        "kind": 6,
        "importPath": "coolsite.WebManga.views",
        "description": "coolsite.WebManga.views",
        "peekOfCode": "class Showpost(DataMixin, DetailView):\n    model = Manga\n    template_name = 'WebManga/post.html'\n    slug_url_kwarg = 'post_slug'\n    context_object_name = 'post'\n    def get_context_data(self, *, object_name_list=None, **kwargs):\n        context = super().get_context_data(**kwargs)\n        c_def = self.get_user_context(title=context['post'])\n        return dict(list(context.items()) + list(c_def.items()))\nclass RegisterUser(DataMixin, CreateView):",
        "detail": "coolsite.WebManga.views",
        "documentation": {}
    },
    {
        "label": "RegisterUser",
        "kind": 6,
        "importPath": "coolsite.WebManga.views",
        "description": "coolsite.WebManga.views",
        "peekOfCode": "class RegisterUser(DataMixin, CreateView):\n    form_class = RegisterUserForm\n    template_name = 'WebManga/register.html'\n    success_url = reverse_lazy('login')\n    def get_context_data(self, *, object_name_list=None, **kwargs):\n        context = super().get_context_data(**kwargs)\n        c_def = self.get_user_context(title='Регистрация')\n        return dict(list(context.items()) + list(c_def.items()))\n    def form_valid(self, form):\n        user = form.save()",
        "detail": "coolsite.WebManga.views",
        "documentation": {}
    },
    {
        "label": "LoginUser",
        "kind": 6,
        "importPath": "coolsite.WebManga.views",
        "description": "coolsite.WebManga.views",
        "peekOfCode": "class LoginUser(DataMixin, LoginView):\n    form_class = LoginUserForm\n    template_name = 'WebManga/login.html'\n    def get_context_data(self, *, object_name_list=None, **kwargs):\n        context = super().get_context_data(**kwargs)\n        c_def = self.get_user_context(title='Авторизация')\n        return dict(list(context.items()) + list(c_def.items()))\n    def get_success_url(self):\n        return reverse_lazy('home')\ndef logout_user(request):",
        "detail": "coolsite.WebManga.views",
        "documentation": {}
    },
    {
        "label": "MessageUser",
        "kind": 6,
        "importPath": "coolsite.WebManga.views",
        "description": "coolsite.WebManga.views",
        "peekOfCode": "class MessageUser(DataMixin, CreateView):\n    form_class = MessageForm\n    template_name = 'WebManga/chat.html'\n    def get_context_data(self, *, object_name= None, **kwargs):\n        context = super().get_user_context(**kwargs)\n        c_def = self.get_user_context(title='Чат')\n        return dict(list(context.items()) + list(c_def.items()))\n    def form_valid(self, form):\n        form.instance.sender = self.request.user\n        form.instance.message = form.cleaned_data['message']",
        "detail": "coolsite.WebManga.views",
        "documentation": {}
    },
    {
        "label": "category",
        "kind": 2,
        "importPath": "coolsite.WebManga.views",
        "description": "coolsite.WebManga.views",
        "peekOfCode": "def category(request):\n    return HttpResponse('категории')\nclass About(DataMixin, ListView):\n    model = Manga\n    template_name = 'WebManga/about.html'\n    context_object_name = 'posts'\n    def get_context_data(self, *, object_list=None, **kwargs):\n        context = super().get_context_data(**kwargs)\n        c_def = self.get_user_context(title='О сайте')\n        return dict(list(context.items()) + list(c_def.items()))",
        "detail": "coolsite.WebManga.views",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 2,
        "importPath": "coolsite.WebManga.views",
        "description": "coolsite.WebManga.views",
        "peekOfCode": "def contact(request):\n    return HttpResponse('Свя3ь с ра3работчиком')\nclass Showpost(DataMixin, DetailView):\n    model = Manga\n    template_name = 'WebManga/post.html'\n    slug_url_kwarg = 'post_slug'\n    context_object_name = 'post'\n    def get_context_data(self, *, object_name_list=None, **kwargs):\n        context = super().get_context_data(**kwargs)\n        c_def = self.get_user_context(title=context['post'])",
        "detail": "coolsite.WebManga.views",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "kind": 2,
        "importPath": "coolsite.WebManga.views",
        "description": "coolsite.WebManga.views",
        "peekOfCode": "def logout_user(request):\n    logout(request)\n    return redirect('login')\nclass MessageUser(DataMixin, CreateView):\n    form_class = MessageForm\n    template_name = 'WebManga/chat.html'\n    def get_context_data(self, *, object_name= None, **kwargs):\n        context = super().get_user_context(**kwargs)\n        c_def = self.get_user_context(title='Чат')\n        return dict(list(context.items()) + list(c_def.items()))",
        "detail": "coolsite.WebManga.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "coolsite.manage",
        "description": "coolsite.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'coolsite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "coolsite.manage",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def total(line: str) -> dict:\n    total_count = dict()\n    for i in line:\n        if i.isalpha():\n            total_count[i] = total_count.get(i, 0) + 1\n    return total_count\ndef sort_list(numbers: list) -> list:\n    i, count = 0, len(numbers)\n    while i < count - 1:\n        j = 0",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "sort_list",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def sort_list(numbers: list) -> list:\n    i, count = 0, len(numbers)\n    while i < count - 1:\n        j = 0\n        while j < count - 1 - i:\n            if numbers[j] > numbers[j + 1]:\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n            j += 1\n        i += 1\n    return numbers",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "isPalindrom",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def isPalindrom(x: int) -> bool:\n    return int(str(x)[::-1]) == x\n# print(isPalindrom(784))\n# def form_valid(self, form):\n    #     user = form.save()\n    #     login(self.request, user)\n    #     user1 = get_user_model().objects.get(username=user)\n    #     user1.slug = user.username\n    #     return redirect('home')\n# a = 5 #int(input()) # 5 integer",
        "detail": "test",
        "documentation": {}
    }
]